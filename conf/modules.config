/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    // Publish directory names
    assembly_directory_name = "assembly"
    summary_directory_name = "summary"

    metadata_tsv_directory_name = "metadata"
    arborator_directory_name = "arborator"
    arborview_directory_name = "arborview"

    locidex_merge_directory_name = [params.outdir , "locidex"].join(File.separator)
    locidex_concat_directory_name = [params.outdir , "locidex", "concat"].join(File.separator)

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: LOCIDEX_MERGE {
        publishDir = [
            path: locidex_merge_directory_name,
            mode: params.publish_dir_mode,
            pattern:  "merged/{MLST_error_report,profile}*.{csv,tsv}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: LOCIDEX_CONCAT {
        publishDir = [
            path: locidex_concat_directory_name,
            mode: params.publish_dir_mode,
            pattern:  "{MLST_error_report_,profile_}concat.{csv,tsv}",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: MAP_TO_TSV {
        publishDir = [
            path: { ["${params.outdir}", "${task.metadata_tsv_directory_name}"].join(File.separator) },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: ARBORATOR {
        publishDir = [
            path: { ["${params.outdir}", "${task.arborator_directory_name}"].join(File.separator) },
            mode: params.publish_dir_mode,
            saveAs: { filename ->
                def elements = filename.tokenize(File.separator)
                def cluster_name = -2
                def file_name = -1

                // The file structure of the outputs has three levels:
                // 1. The output directory containing everything. (depth 1)
                // 2. Summarizing files and cluster directories within
                //    the output directory. (depth 2)
                // 3. Cluster files within cluster directories. (depth 3)
                def SUMMARY_FILE_DEPTH = 2
                def CLUSTER_FILE_DEPTH = 3

                filename.equals('versions.yml') ? null:
                elements.size() == CLUSTER_FILE_DEPTH ? elements[cluster_name] + "_" + elements[file_name]:  // flatten
                elements.size() == SUMMARY_FILE_DEPTH ? elements[file_name]:
                filename
            }
        ]
    }

    withName: ARBOR_VIEW {
        publishDir = [
            path: { ["${params.outdir}", "${task.arborview_directory_name}"].join(File.separator) },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

}
